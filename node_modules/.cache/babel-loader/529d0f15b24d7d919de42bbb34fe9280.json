{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rohat\\\\Desktop\\\\nft exercise\\\\reactApp\\\\src\\\\Form.js\";\nimport React, { Component } from 'react';\nimport Button from '@mui/material/Button';\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst WAValidator = require('./wav');\n\nvar valid = WAValidator.validate('1337ipJbP7U9mi9cdLngL3g5Napum7tWzM', 'BTC');\nif (valid) console.log('This is a valid address');else console.log('Address INVALID'); //a list of available blockchains on moralis api\n\nconst availableChains = [{\n  label: \"Ethereum\",\n  symbol: \"eth\"\n}, {\n  label: \"Binance Smart Chain\",\n  symbol: \"bsc\"\n}, {\n  label: \"Polygon\",\n  symbol: \"matic\"\n}, {\n  label: \"Solana\",\n  symbol: \"sol\"\n}, {\n  label: \"Elrond\",\n  symbol: \"egld\"\n}];\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      chain: '',\n      address: '',\n      isError: {\n        error: false\n      }\n    };\n    this.handleChange = this.handleInputChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleInputChange(event) {\n    const target = event.target;\n    console.log(target.innerHTML);\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    const chain = target.chain;\n    this.setState({\n      [chain]: value\n    });\n    console.log('Change detected. State updated' + chain + ' = ' + value);\n  }\n\n  handleSubmit(event) {\n    alert('A form was submitted: ' + this.state.chain + ' // ' + this.state.address);\n    event.preventDefault();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Autocomplete, {\n          disablePortal: true,\n          id: \"chain\",\n          onChange: (event, selectedValue) => {\n            //null check in case the user wants to press x in order to delete current selection\n            this.setState({\n              chain: selectedValue != null ? selectedValue[\"symbol\"] : ''\n            });\n          },\n          options: availableChains,\n          sx: {\n            width: 300\n          },\n          renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n            label: \"Select network\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 42\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          id: \"standard-basic\",\n          label: \"Standard\",\n          variant: \"standard\",\n          ...this.state.isError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          type: \"submit\",\n          value: \"Submit\",\n          children: \"Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default Form;","map":{"version":3,"sources":["C:/Users/rohat/Desktop/nft exercise/reactApp/src/Form.js"],"names":["React","Component","Button","w3cwebsocket","W3CWebSocket","TextField","Autocomplete","WAValidator","require","valid","validate","console","log","availableChains","label","symbol","Form","constructor","props","state","chain","address","isError","error","handleChange","handleInputChange","bind","handleSubmit","event","target","innerHTML","value","type","checked","setState","alert","preventDefault","render","selectedValue","width","params"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\r\nimport TextField from '@mui/material/TextField';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nconst WAValidator = require('./wav');\r\nvar valid = WAValidator.validate('1337ipJbP7U9mi9cdLngL3g5Napum7tWzM', 'BTC');\r\nif(valid)\r\n\tconsole.log('This is a valid address');\r\nelse\r\n\tconsole.log('Address INVALID');\r\n//a list of available blockchains on moralis api\r\nconst availableChains=[{label:\"Ethereum\",symbol:\"eth\"},{label:\"Binance Smart Chain\",symbol:\"bsc\"},{label:\"Polygon\",symbol:\"matic\"},{label:\"Solana\",symbol:\"sol\"},{label:\"Elrond\",symbol:\"egld\"}];\r\nclass Form extends Component {\r\n\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        chain: '',\r\n        address:'',\r\n        isError:{error:false}\r\n      };\r\n  \r\n      this.handleChange = this.handleInputChange.bind(this);\r\n      this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n\r\n    handleInputChange(event) {\r\n      const target = event.target;\r\n      console.log(target.innerHTML);\r\n      const value = target.type === 'checkbox' ? target.checked : target.value;\r\n      const chain = target.chain;\r\n      \r\n      this.setState({\r\n        [chain]: value\r\n      });\r\n      console.log('Change detected. State updated' + chain + ' = ' + value);\r\n    }\r\n  \r\n    handleSubmit(event) {\r\n      alert('A form was submitted: ' + this.state.chain + ' // ' + this.state.address);\r\n      event.preventDefault();\r\n    }\r\n    render() {\r\n      return (\r\n        <div>\r\n          <form onSubmit={this.handleSubmit}>\r\n            <Autocomplete\r\n                disablePortal\r\n                id=\"chain\"\r\n                onChange={(event, selectedValue) => {\r\n                    //null check in case the user wants to press x in order to delete current selection\r\n                    this.setState({chain:selectedValue!=null?selectedValue[\"symbol\"]:''});\r\n                  }}\r\n                options={availableChains}\r\n                sx={{ width: 300 }}\r\n                renderInput={(params) => <TextField {...params} label=\"Select network\" />}\r\n            />\r\n            <TextField id=\"standard-basic\" label=\"Standard\" variant=\"standard\" {...this.state.isError}/>\r\n            <Button variant=\"outlined\" type=\"submit\" value=\"Submit\" >Search</Button>\r\n          </form>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n  \r\nexport default Form;\r\n"]},"metadata":{},"sourceType":"module"}