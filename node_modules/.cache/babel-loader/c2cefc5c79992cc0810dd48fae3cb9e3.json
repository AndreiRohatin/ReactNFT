{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rohat\\\\Desktop\\\\nft exercise\\\\reactApp\\\\src\\\\Form.js\";\nimport React, { Component } from 'react';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport Container from '@mui/material/Container';\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\"; //required to validate addresses\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst WAValidator = require('./wav'); //a list of available blockchains on moralis api\n\n\nconst availableChains = [{\n  label: \"Ethereum\",\n  symbol: \"eth\"\n}, {\n  label: \"Binance Smart Chain\",\n  symbol: \"bsc\"\n}, {\n  label: \"Polygon\",\n  symbol: \"matic\"\n}, {\n  label: \"Solana\",\n  symbol: \"sol\"\n}, {\n  label: \"Elrond\",\n  symbol: \"egld\"\n}]; //get ws connection\n//connect react app with node.js in real time\n\nconst client = new W3CWebSocket('ws://localhost:5000');\nconsole.log(client);\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleResponse = async () => {\n      this.props.getResponse(await client.onmessage);\n    };\n\n    this.state = {\n      chain: '',\n      address: '',\n      isError: {\n        error: false\n      }\n    };\n\n    client.onopen = () => {\n      console.log('WebSocket Client Connected');\n    };\n\n    client.onmessage = message => {\n      console.log(message);\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  validateAddress(address, chain) {\n    //validate only eth/matic/sol. There is no support atm for bsc/egld\n    if (chain != '' && chain != 'egld' && chain != 'bsc' && address != null && !WAValidator.validate(address, chain)) {\n      //user selected a network and wrote an address but they are wrong, let's give a warning\n      this.setState({\n        isError: {\n          error: true\n        }\n      });\n    } else {\n      //since we can't validate no client side we'll guess for now that everything is ok\n      this.setState({\n        isError: {\n          error: false\n        }\n      });\n    }\n  }\n\n  handleSubmit(event) {\n    if (this.state.address && this.state.chain) client.send(JSON.stringify({\n      chain: this.state.chain,\n      query: 'nfts',\n      user: this.state.address\n    }));\n    event.preventDefault();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Autocomplete, {\n          disablePortal: true,\n          id: \"chain\",\n          onChange: (event, selectedValue) => {\n            //we can't use the value from state atm\n            const currChain = selectedValue != null ? selectedValue[\"symbol\"] : ''; //null check in case the user wants to press x in order to delete current selection\n\n            this.setState({\n              chain: currChain\n            });\n            this.validateAddress(this.state.address, currChain);\n          },\n          options: availableChains,\n          sx: {\n            width: 300\n          },\n          renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n            label: \"Select a network\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 42\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          onChange: event => {\n            this.setState({\n              address: event.target.value\n            });\n            this.validateAddress(event.target.value, this.state.chain);\n          },\n          label: \"Enter Public Address\",\n          variant: \"standard\",\n          ...this.state.isError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          type: \"submit\",\n          value: \"Submit\",\n          disabled: this.state.isError[\"error\"],\n          children: \"Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default Form;","map":{"version":3,"sources":["C:/Users/rohat/Desktop/nft exercise/reactApp/src/Form.js"],"names":["React","Component","Button","TextField","Autocomplete","Container","w3cwebsocket","W3CWebSocket","WAValidator","require","availableChains","label","symbol","client","console","log","Form","constructor","props","handleResponse","getResponse","onmessage","state","chain","address","isError","error","onopen","message","handleSubmit","bind","validateAddress","validate","setState","event","send","JSON","stringify","query","user","preventDefault","render","selectedValue","currChain","width","params","target","value"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport TextField from '@mui/material/TextField';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport Container from '@mui/material/Container';\r\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\r\n\r\n\r\n//required to validate addresses\r\nconst WAValidator = require('./wav');\r\n//a list of available blockchains on moralis api\r\nconst availableChains=[{label:\"Ethereum\",symbol:\"eth\"},{label:\"Binance Smart Chain\",symbol:\"bsc\"},{label:\"Polygon\",symbol:\"matic\"},{label:\"Solana\",symbol:\"sol\"},{label:\"Elrond\",symbol:\"egld\"}];\r\n//get ws connection\r\n//connect react app with node.js in real time\r\nconst client = new W3CWebSocket('ws://localhost:5000');\r\n\r\nconsole.log(client);\r\nclass Form extends Component {\r\n\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        chain: '',\r\n        address:'',\r\n        isError:{error:false}\r\n      };\r\n      client.onopen = () => {\r\n        console.log('WebSocket Client Connected');\r\n      };\r\n      client.onmessage = (message) => {\r\n        console.log(message);\r\n      };\r\n      this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleResponse = async ()=>{\r\n        this.props.getResponse(await client.onmessage);\r\n    }\r\n    \r\n\r\n    validateAddress(address,chain){\r\n        //validate only eth/matic/sol. There is no support atm for bsc/egld\r\n        if(chain!='' && chain!='egld' && chain!='bsc' && address!=null && !WAValidator.validate(address, chain)){\r\n            //user selected a network and wrote an address but they are wrong, let's give a warning\r\n            this.setState({isError:{error:true}});\r\n        }else{\r\n            //since we can't validate no client side we'll guess for now that everything is ok\r\n            this.setState({isError:{error:false}});\r\n        }\r\n    }\r\n  \r\n    handleSubmit(event) {\r\n      if(this.state.address && this.state.chain) client.send(JSON.stringify({chain:this.state.chain,query:'nfts',user:this.state.address}));\r\n      event.preventDefault();\r\n    }\r\n    render() {\r\n      return (\r\n        <Container>\r\n          <form onSubmit={this.handleSubmit}>\r\n            <Autocomplete\r\n                disablePortal\r\n                id=\"chain\"\r\n                onChange={(event, selectedValue) => {\r\n                    //we can't use the value from state atm\r\n                    const currChain=selectedValue!=null?selectedValue[\"symbol\"]:'';\r\n\r\n                    //null check in case the user wants to press x in order to delete current selection\r\n                    this.setState({chain:currChain});\r\n                    this.validateAddress(this.state.address,currChain);\r\n                  }}\r\n                options={availableChains}\r\n                sx={{ width: 300 }}\r\n                renderInput={(params) => <TextField {...params} label=\"Select a network\" />}\r\n            />\r\n            <TextField onChange={(event)=>{this.setState({address:event.target.value}); this.validateAddress(event.target.value,this.state.chain) }} label=\"Enter Public Address\" variant=\"standard\" {...this.state.isError}/>\r\n            <Button variant=\"outlined\" type=\"submit\" value=\"Submit\" disabled={this.state.isError[\"error\"]}>Search</Button>\r\n          </form>\r\n      </Container>\r\n      )\r\n    }\r\n  }\r\n  \r\nexport default Form;\r\n"]},"metadata":{},"sourceType":"module"}