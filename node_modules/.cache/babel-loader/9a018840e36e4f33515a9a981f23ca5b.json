{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rohat\\\\Desktop\\\\nft exercise\\\\reactApp\\\\src\\\\Form.js\";\nimport React, { Component } from 'react';\nimport Button from '@mui/material/Button';\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport Container from '@mui/material/Container';\nimport Loading from \"react-cssfx-loading/lib/Spin\"; //required to validate addresses\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst WAValidator = require('./wav'); //connect react app with node.js in real time\n\n\nconst client = new W3CWebSocket('ws://localhost:3000'); //a list of available blockchains on moralis api\n\nconst availableChains = [{\n  label: \"Ethereum\",\n  symbol: \"eth\"\n}, {\n  label: \"Binance Smart Chain\",\n  symbol: \"bsc\"\n}, {\n  label: \"Polygon\",\n  symbol: \"matic\"\n}, {\n  label: \"Solana\",\n  symbol: \"sol\"\n}, {\n  label: \"Elrond\",\n  symbol: \"egld\"\n}];\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      chain: '',\n      address: '',\n      isError: {\n        error: false\n      },\n      isLoading: true\n    };\n\n    client.onopen = () => {\n      console.log('WebSocket Client Connected');\n    };\n\n    client.onmessage = message => {\n      console.log(message);\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  validateAddress(address, chain) {\n    //validate only eth/matic/sol. There is no support atm for bsc/egld\n    if (chain != '' && chain != 'egld' && chain != 'bsc' && address != null && !WAValidator.validate(address, chain)) {\n      //user selected a network and wrote an address but they are wrong, let's give a warning\n      this.setState({\n        isError: {\n          error: true\n        }\n      });\n    } else {\n      //since we can't validate no client side we'll guess for now that everything is ok\n      this.setState({\n        isError: {\n          error: false\n        }\n      });\n    }\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n  }\n\n  render() {\n    return this.state.isLoading ? /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Loading, {\n        style: {\n          position: \"absolute\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Loading, {\n        style: {\n          position: \"absolute\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Autocomplete, {\n          disablePortal: true,\n          id: \"chain\",\n          onChange: (event, selectedValue) => {\n            //we can't use the value from state atm\n            const currChain = selectedValue != null ? selectedValue[\"symbol\"] : ''; //null check in case the user wants to press x in order to delete current selection\n\n            this.setState({\n              chain: currChain\n            });\n            this.validateAddress(this.state.address, currChain);\n          },\n          options: availableChains,\n          sx: {\n            width: 300\n          },\n          renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n            label: \"Select a network\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 42\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          onChange: event => {\n            this.setState({\n              address: event.target.value\n            });\n            this.validateAddress(event.target.value, this.state.chain);\n          },\n          label: \"Enter Public Address\",\n          variant: \"standard\",\n          ...this.state.isError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          type: \"submit\",\n          value: \"Submit\",\n          disabled: this.state.isError[\"error\"],\n          children: \"Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default Form;","map":{"version":3,"sources":["C:/Users/rohat/Desktop/nft exercise/reactApp/src/Form.js"],"names":["React","Component","Button","w3cwebsocket","W3CWebSocket","TextField","Autocomplete","Container","Loading","WAValidator","require","client","availableChains","label","symbol","Form","constructor","props","state","chain","address","isError","error","isLoading","onopen","console","log","onmessage","message","handleSubmit","bind","validateAddress","validate","setState","event","preventDefault","render","position","selectedValue","currChain","width","params","target","value"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\r\nimport TextField from '@mui/material/TextField';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport Container from '@mui/material/Container';\r\nimport Loading from \"react-cssfx-loading/lib/Spin\";\r\n\r\n\r\n//required to validate addresses\r\nconst WAValidator = require('./wav');\r\n//connect react app with node.js in real time\r\nconst client = new W3CWebSocket('ws://localhost:3000');\r\n//a list of available blockchains on moralis api\r\nconst availableChains=[{label:\"Ethereum\",symbol:\"eth\"},{label:\"Binance Smart Chain\",symbol:\"bsc\"},{label:\"Polygon\",symbol:\"matic\"},{label:\"Solana\",symbol:\"sol\"},{label:\"Elrond\",symbol:\"egld\"}];\r\n\r\nclass Form extends Component {\r\n\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        chain: '',\r\n        address:'',\r\n        isError:{error:false},\r\n        isLoading:true\r\n      };\r\n      client.onopen = () => {\r\n        console.log('WebSocket Client Connected');\r\n      };\r\n      client.onmessage = (message) => {\r\n        console.log(message);\r\n      };\r\n      this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    validateAddress(address,chain){\r\n        //validate only eth/matic/sol. There is no support atm for bsc/egld\r\n        if(chain!='' && chain!='egld' && chain!='bsc' && address!=null && !WAValidator.validate(address, chain)){\r\n            //user selected a network and wrote an address but they are wrong, let's give a warning\r\n            this.setState({isError:{error:true}});\r\n        }else{\r\n            //since we can't validate no client side we'll guess for now that everything is ok\r\n            this.setState({isError:{error:false}});\r\n        }\r\n    }\r\n  \r\n    handleSubmit(event) {\r\n      event.preventDefault();\r\n    }\r\n    render() {\r\n      return this.state.isLoading?(\r\n        <Container>\r\n        <Loading style={{position:\"absolute\"}}/>\r\n      </Container>\r\n      ):(\r\n        <Container>\r\n        <Loading style={{position:\"absolute\"}}/>\r\n          <form onSubmit={this.handleSubmit}>\r\n            <Autocomplete\r\n                disablePortal\r\n                id=\"chain\"\r\n                onChange={(event, selectedValue) => {\r\n                    //we can't use the value from state atm\r\n                    const currChain=selectedValue!=null?selectedValue[\"symbol\"]:'';\r\n\r\n                    //null check in case the user wants to press x in order to delete current selection\r\n                    this.setState({chain:currChain});\r\n                    this.validateAddress(this.state.address,currChain);\r\n                  }}\r\n                options={availableChains}\r\n                sx={{ width: 300 }}\r\n                renderInput={(params) => <TextField {...params} label=\"Select a network\" />}\r\n            />\r\n            <TextField onChange={(event)=>{this.setState({address:event.target.value}); this.validateAddress(event.target.value,this.state.chain) }} label=\"Enter Public Address\" variant=\"standard\" {...this.state.isError}/>\r\n            <Button variant=\"outlined\" type=\"submit\" value=\"Submit\" disabled={this.state.isError[\"error\"]}>Search</Button>\r\n          </form>\r\n      </Container>\r\n      )\r\n    }\r\n  }\r\n  \r\nexport default Form;\r\n"]},"metadata":{},"sourceType":"module"}