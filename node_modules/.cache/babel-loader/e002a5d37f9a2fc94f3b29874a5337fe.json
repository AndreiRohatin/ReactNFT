{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rohat\\\\Desktop\\\\nft exercise\\\\reactApp\\\\src\\\\Form.js\";\nimport React, { Component } from 'react';\nimport Button from '@mui/material/Button';\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst WAValidator = require('./wav'); //a list of available blockchains on moralis api\n\n\nconst availableChains = [{\n  label: \"Ethereum\",\n  symbol: \"eth\"\n}, {\n  label: \"Binance Smart Chain\",\n  symbol: \"bsc\"\n}, {\n  label: \"Polygon\",\n  symbol: \"matic\"\n}, {\n  label: \"Solana\",\n  symbol: \"sol\"\n}, {\n  label: \"Elrond\",\n  symbol: \"egld\"\n}];\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      chain: '',\n      address: 'caca',\n      isError: {\n        error: false\n      }\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(event) {\n    alert('A form was submitted: ' + this.state.chain + ' // ' + this.state.address);\n    event.preventDefault();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Autocomplete, {\n          disablePortal: true,\n          id: \"chain\",\n          onChange: (event, selectedValue) => {\n            console.log('caca'); //null check in case the user wants to press x in order to delete current selection\n\n            this.setState({\n              chain: selectedValue != null ? selectedValue[\"symbol\"] : ''\n            });\n            if (this.state.chain != '' && this.state.chain != 'egld' && this.state.chain != 'bsc') console.log(WAValidator.validate(this.state.address, this.state.chain)); //validate only \n\n            if (this.state && this.state.chain != '' && this.state.chain != 'egld' && this.state.chain != 'bsc' && this.state.address != null && !WAValidator.validate(this.state.address, this.state.chain)) {\n              //user selected a network and wrote an address but they are wrong, let's give a warning\n              this.setState({\n                isError: {\n                  error: true\n                }\n              });\n            } else {\n              //since we can't validate no client side we'll guess for now that everything is ok\n              this.setState({\n                isError: {\n                  error: false\n                }\n              });\n            }\n          },\n          options: availableChains,\n          sx: {\n            width: 300\n          },\n          renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n            label: \"Select network\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 42\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          id: \"standard-basic\",\n          label: \"Standard\",\n          variant: \"standard\",\n          ...this.state.isError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          type: \"submit\",\n          value: \"Submit\",\n          children: \"Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default Form;","map":{"version":3,"sources":["C:/Users/rohat/Desktop/nft exercise/reactApp/src/Form.js"],"names":["React","Component","Button","w3cwebsocket","W3CWebSocket","TextField","Autocomplete","WAValidator","require","availableChains","label","symbol","Form","constructor","props","state","chain","address","isError","error","handleSubmit","bind","event","alert","preventDefault","render","selectedValue","console","log","setState","validate","width","params"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\r\nimport TextField from '@mui/material/TextField';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nconst WAValidator = require('./wav');\r\n\r\n//a list of available blockchains on moralis api\r\nconst availableChains=[{label:\"Ethereum\",symbol:\"eth\"},{label:\"Binance Smart Chain\",symbol:\"bsc\"},{label:\"Polygon\",symbol:\"matic\"},{label:\"Solana\",symbol:\"sol\"},{label:\"Elrond\",symbol:\"egld\"}];\r\nclass Form extends Component {\r\n\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        chain: '',\r\n        address:'caca',\r\n        isError:{error:false}\r\n      };\r\n  \r\n      this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n  \r\n    handleSubmit(event) {\r\n      alert('A form was submitted: ' + this.state.chain + ' // ' + this.state.address);\r\n      event.preventDefault();\r\n    }\r\n    render() {\r\n      return (\r\n        <div>\r\n          <form onSubmit={this.handleSubmit}>\r\n            <Autocomplete\r\n                disablePortal\r\n                id=\"chain\"\r\n                onChange={(event, selectedValue) => {\r\n                    console.log('caca');\r\n                    //null check in case the user wants to press x in order to delete current selection\r\n                    this.setState({chain:selectedValue!=null?selectedValue[\"symbol\"]:''});\r\n                    if(this.state.chain!='' && this.state.chain!='egld' && this.state.chain!='bsc') console.log(WAValidator.validate(this.state.address, this.state.chain));\r\n                    //validate only \r\n                    if(this.state && (this.state.chain!='' && this.state.chain!='egld' && this.state.chain!='bsc') && this.state.address!=null && !WAValidator.validate(this.state.address, this.state.chain)){\r\n                        //user selected a network and wrote an address but they are wrong, let's give a warning\r\n                        this.setState({isError:{error:true}});\r\n                    }else{\r\n                        //since we can't validate no client side we'll guess for now that everything is ok\r\n                        this.setState({isError:{error:false}});\r\n                    }\r\n                  }}\r\n                options={availableChains}\r\n                sx={{ width: 300 }}\r\n                renderInput={(params) => <TextField {...params} label=\"Select network\" />}\r\n            />\r\n            <TextField id=\"standard-basic\" label=\"Standard\" variant=\"standard\" {...this.state.isError}/>\r\n            <Button variant=\"outlined\" type=\"submit\" value=\"Submit\" >Search</Button>\r\n          </form>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n  \r\nexport default Form;\r\n"]},"metadata":{},"sourceType":"module"}